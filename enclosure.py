class Enclosure:
    def __init__(self, length, width, height, measure='meters'):
        self.length = length
        self.width = width
        self.height = height
        self.measure = measure

    def __normalize(self):
        multiplier = 1
        if self.measure is "meters":
            multiplier = 1
        elif self.measure is "feet":
            multiplier = 0.3048
        elif self.measure is "yards":
            multiplier = 0.9144
        elif self.measure is "kilometers":
            multiplier = 1000
        elif self.measure is "inches":
            multiplier = 0.0254
        elif self.measure is "centimeters":
            multiplier = 0.01
        elif self.measure is "millimeters":
            multiplier = 0.01
        elif self.measure is "miles":
            multiplier = 1609.34

        #at this point we have the multiplier to convert the distances into meters

        self.length = self.length * multiplier
        self.width = self.width * multiplier
        self.height = self.height * multiplier


# Measure can be: inches, feet, meters,
# plt.plot({xList}, {yList}, 'ro') - ordered pairs look like: (xList[0],yList[0])


# my current plan is to make a demo that works on the shark input data. Might make video actually

# idea: generate an animation from the excel sheet + enclosure info combo.
# We can have a 2d plane, and have a different color circle for each shark.
# The circles can be darker/lighter to show depth, also with a number value maybe with them
# And we will generate an animation where a frame is basically a row of data
# And then the animation would be the sequence of frames generated by generating a frame for each row.
# If this moves too quickly we might have to make a method that generates frames between the different states (rows).

# We also would like to generate a 2d heatmap of where all sharks are in the tank over the whole period.
# This is easy because at any moment, every shark is somewhere, so we do the same thing as above, but for each step of the
# animation(each row of the dataset), we increment a 2d matrix(600x600) based on the value of ....

# NOTE: the data is of the following form: somewhat randomly, a shark's position is recorded every minute for 10 minutes. And this is marked as a session
# there are many sets of these sessions across the different sharks in the data
# the heatmap[600x600] would have a value at each spot, from 0 to to sqrt(positions recorded)

# so, our animation would be different, going to do the heatmap first. Will first process the data into an array of a model class that we define
# the model class can be defined around these sharks for now, so we can do: {dict["name", dict[time,(x,y)]]



